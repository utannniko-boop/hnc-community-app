-- Supabase schema for anonymous posts with moderation
create table if not exists public.posts (
  id bigint generated by default as identity primary key,
  cancer_id text not null,
  nickname text,
  body text not null check (char_length(body) <= 500),
  hidden boolean not null default false,
  created_at timestamp with time zone not null default now()
);

create table if not exists public.reports (
  id bigint generated by default as identity primary key,
  post_id bigint not null references public.posts(id) on delete cascade,
  reason text,
  created_at timestamp with time zone not null default now()
);

-- Enable RLS
alter table public.posts enable row level security;
alter table public.reports enable row level security;

-- Policies
create policy "read_visible_posts" on public.posts for select using (hidden = false);
create policy "insert_posts" on public.posts for insert with check (true);
create policy "insert_reports" on public.reports for insert with check (true);

-- Moderation: hide posts with admin/service key
-- update posts set hidden = true where id = :post_id;



-- ========== Moderators & Policies ==========
create table if not exists public.moderators (
  user_id uuid primary key references auth.users(id) on delete cascade,
  email text unique
);

-- Allow moderators to update posts.hidden
create policy if not exists "mods_update_posts"
  on public.posts for update
  using (exists (select 1 from public.moderators m where m.user_id = auth.uid()))
  with check (exists (select 1 from public.moderators m where m.user_id = auth.uid()));

-- Allow moderators to select/delete reports
create policy if not exists "mods_select_reports"
  on public.reports for select
  using (exists (select 1 from public.moderators m where m.user_id = auth.uid()));

create policy if not exists "mods_delete_reports"
  on public.reports for delete
  using (exists (select 1 from public.moderators m where m.user_id = auth.uid()));

-- View to list reports joined with post data (for admin UI)
create or replace view public.mod_reports as
select
  r.id as report_id,
  r.created_at as report_created,
  p.id as post_id,
  p.cancer_id,
  p.nickname,
  p.body,
  p.hidden as post_hidden
from public.reports r
join public.posts p on p.id = r.post_id
order by r.created_at desc;

alter view public.mod_reports owner to postgres;

-- RLS for the view via underlying tables policies; add explicit policy if needed with security invoker
